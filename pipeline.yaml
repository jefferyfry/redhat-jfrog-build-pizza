apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-clone
spec:
  workspaces:
    - name: output
      description: The git repo will be cloned onto the volume backing this workspace
  params:
    - name: url
      description: git url to clone
      type: string
    - name: revision
      description: git revision to checkout (branch, tag, sha, refâ€¦)
      type: string
      default: master
    - name: submodules
      description: defines if the resource should initialize and fetch the submodules
      type: string
      default: "true"
    - name: depth
      description: performs a shallow clone where only the most recent commit(s) will be fetched
      type: string
      default: "1"
    - name: sslVerify
      description: defines if http.sslVerify should be set to true or false in the global git config
      type: string
      default: "true"
    - name: subdirectory
      description: subdirectory inside the "output" workspace to clone the git repo into
      type: string
      default: ""
    - name: deleteExisting
      description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
      type: string
      default: "false"
  results:
    - name: commit
      description: The precise commit SHA that was fetched by this Task
  steps:
    - name: clone
      image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:latest
      script: |
        CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"
        cleandir() {
          # Delete any existing contents of the repo directory if it exists.
          #
          # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
          # or the root of a mounted volume.
          if [[ -d "$CHECKOUT_DIR" ]] ; then
            # Delete non-hidden files and directories
            rm -rf "$CHECKOUT_DIR"/*
            # Delete files and directories starting with . but excluding ..
            rm -rf "$CHECKOUT_DIR"/.[!.]*
            # Delete files and directories starting with .. plus any other character
            rm -rf "$CHECKOUT_DIR"/..?*
          fi
        }
        if [[ "$(params.deleteExisting)" == "true" ]] ; then
          cleandir
        fi
        /ko-app/git-init \
          -url "$(params.url)" \
          -revision "$(params.revision)" \
          -path "$CHECKOUT_DIR" \
          -sslVerify="$(params.sslVerify)" \
          -submodules="$(params.submodules)" \
          -depth="$(params.depth)"
        cd "$CHECKOUT_DIR"
        RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
        EXIT_CODE="$?"
        if [ "$EXIT_CODE" != 0 ]
        then
          exit $EXIT_CODE
        fi
        # Make sure we don't add a trailing newline to the result!
        echo -n "$RESULT_SHA" > $(results.commit.path)
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: rt-config-task
spec:
  workspaces:
    - name: build-workspace
  params:
    - name: server
      type: string
    - name: username
      type: string
    - name: apikey
      type: string
    - name: repo
      type: string
    - name: workdir
      type: string
  steps:
    - image: docker.bintray.io/jfrog/jfrog-cli-go:latest
      workingDir: "$(params.workdir)"
      command: ["rt"]
      args: ["-c","$(params.repo)","$(params.repo)","--url=https://$(params.server)/artifactory","--user=$(params.username)","--apikey=$(params.apikey)"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: npm-config-task
spec:
  workspaces:
    - name: build-workspace
  params:
    - name: repo
      type: string
    - name: workdir
      type: string
  steps:
    - image: docker.bintray.io/jfrog/jfrog-cli-go:latest
      workingDir: "$(params.workdir)"
      command: ["rt"]
      args: ["npmc","--repo-resolve=npm", "--repo-deploy=npm","--server-id-resolve=$(params.repo)","--server-id-deploy=$(params.repo)"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: npm-install-task
spec:
  workspaces:
    - name: build-workspace
  params:
    - name: workdir
      type: string
  steps:
    - image: docker.bintray.io/jfrog/jfrog-cli-go:latest
      workingDir: "$(params.workdir)"
      command: ["rt"]
      args: ["npm-install","--build-name=npm_build", "--build-number=1"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: npm-publish-task
spec:
  workspaces:
    - name: build-workspace
  params:
    - name: workdir
      type: string
  steps:
    - image: docker.bintray.io/jfrog/jfrog-cli-go:latest
      workingDir: "$(params.workdir)"
      command: ["rt"]
      args: ["npm-publish","--build-name=npm_build", "--build-number=1"]
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-publish-task
spec:
  workspaces:
    - name: build-workspace
  params:
    - name: workdir
      type: string
  steps:
    - image: docker.bintray.io/jfrog/jfrog-cli-go:latest
      workingDir: "$(params.workdir)"
      command: ["rt"]
      args: ["build-publish","--build-name=npm_build", "--build-number=1"]
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: npm-docker-rt-pipeline
spec:
  params:
    - name: server
      type: string
    - name: username
      type: string
    - name: apikey
      type: string
    - name: repo
      type: string
  workspaces:
    - name: git-source
  tasks:
    - name: git-clone
      taskRef:
        name: git-clone
      params:
        - name: url
          value: https://github.com/jefferyfry/redhat-jfrog-build-pizza
        - name: revision
          value: master
      workspaces:
        - name: output
          workspace: git-source
    - name: rt-config
      taskRef:
        name: rt-config-task
      runAfter:
        - git-clone
      params:
        - name: server
          value: "$(params.server)"
        - name: username
          value: "$(params.username)"
        - name: apikey
          value: "$(params.apikey)"
        - name: repo
          value: "$(params.repo)"
        - name: workdir
          value: "$(workspaces.source.path)/app"
      workspaces:
        - name: build-workspace
          workspace: git-source
    - name: npm-config
      taskRef:
        name: npm-config-task
      runAfter:
        - rt-config
      params:
        - name: repo
          value: "$(params.repo)"
        - name: workdir
          value: "$(workspaces.source.path)/app"
      workspaces:
        - name: build-workspace
          workspace: git-source
    - name: npm-install
      taskRef:
        name: npm-install-task
      runAfter:
        - npm-config
      params:
        - name: workdir
          value: "$(workspaces.source.path)/app"
      workspaces:
        - name: build-workspace
          workspace: git-source
    - name: npm-publish
      taskRef:
        name: npm-publish-task
      runAfter:
        - npm-install
      params:
        - name: workdir
          value: "$(workspaces.source.path)/app"
      workspaces:
        - name: build-workspace
          workspace: git-source
    - name: build-publish
      taskRef:
        name: build-publish-task
      runAfter:
        - npm-publish
      params:
        - name: workdir
          value: "$(workspaces.source.path)/app"
      workspaces:
        - name: build-workspace
          workspace: git-source
---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: build-pizza-app-run
spec:
  pipelineRef:
    name: npm-docker-rt-pipeline
  serviceAccountName: 'default'
  params:
    - name: server
      value: "https://jfrog-https-default.apps.openshift-demo.openshiftk8s.com/"
    - name: username
      value: "admin"
    - name: apikey
      value: "AKCp8iggnWctgnWYCBMG9oKSUA2s2rKMT9wURgDK3XAs7h2RnxG8A2Qtn6kQEg251o8fQ5UoK"
    - name: repo
      value: "npm"
  workspaces:
    - name: git-source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi

